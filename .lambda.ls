flip := \f.\a.\b.f b a
id := \x.x
const := \x.\u.x
comp := \f.\g.\x.f (g x)
succ := \n.\f.\x.f (n f x)
pre := \n.\f.\x.n (\g.\h.h (g f)) (const x) id 
add := \n.\m.\f.\x.n f (m f x)
sub := \n.\m.n pre m
mult := \n.\m.\f.n (m f)
pow := \n.\m.n m
true := \x.\y.x
false := \x.\y.y
and := \a.\b.a b false
or := \a.\b.a true b
not := \a.flip a
if := id
iszero := \n.\x.\y.n (const y) x
isn := \n.\x.(\f.and (f n x) (f x n)) (\x.\y.iszero (sub x y))
fix := \f.(\x.f (x x)) (\x.f (x x)) 
